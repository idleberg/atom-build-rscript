{"version":3,"file":"provider.js","sources":["../src/config.js","../src/provider.js","../src/util.js"],"sourcesContent":["import meta from '../package.json';\n\nexport const configSchema = {\n  customArguments: {\n    title: 'Custom Arguments',\n    description: 'Specify your preferred arguments for `Rscript`, supports [replacement](https://github.com/noseglid/atom-build#replacement) placeholders',\n    type: 'string',\n    'default': '{FILE_ACTIVE}',\n    order: 0\n  },\n  manageDependencies: {\n    title: 'Manage Dependencies',\n    description: 'When enabled, third-party dependencies will be installed automatically',\n    type: 'boolean',\n    default: true,\n    order: 1\n  },\n  alwaysEligible: {\n    title: 'Always Eligible',\n    description: 'The build provider will be available in your project, even when not eligible',\n    type: 'boolean',\n    default: false,\n    order: 2\n  }\n};\n\nexport function getConfig(key) {\n  return atom.config.get(`${meta.name}.${key}`);\n}\n","import { configSchema, getConfig } from './config';\r\nimport { EventEmitter } from 'events';\r\nimport { satisfyDependencies } from 'atom-satisfy-dependencies';\r\nimport { spawnSync } from 'child_process';\r\nimport { which } from './util';\r\n\r\nexport { configSchema as config };\r\n\r\nexport function provideBuilder() {\r\n  return class RscriptProvider extends EventEmitter {\r\n    constructor(cwd) {\r\n      super();\r\n      this.cwd = cwd;\r\n      atom.config.observe('build-rscript.customArguments', () => this.emit('refresh'));\r\n    }\r\n\r\n    getNiceName() {\r\n      return 'Rscript';\r\n    }\r\n\r\n    isEligible() {\r\n      if (getConfig('alwaysEligible') === true) {\r\n        return true;\r\n      }\r\n\r\n      const whichCommand = spawnSync(which(), ['Rscript']);\r\n      if (!whichCommand?.stdout?.toString()) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    settings() {\r\n      // User settings\r\n      const customArguments = getConfig('customArguments').trim().split(' ');\r\n\r\n      return [\r\n        {\r\n          name: 'Rscript',\r\n          exec: 'Rscript',\r\n          args: [ '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'rscript:run'\r\n        },\r\n        {\r\n          name: 'Rscript (user)',\r\n          exec: 'Rscript',\r\n          args: customArguments,\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'rscript:run-with-custom-arguments'\r\n        }\r\n      ];\r\n    }\r\n  };\r\n}\r\n\r\n// This package depends on build, make sure it's installed\r\nexport function activate() {\r\n  if (getConfig('manageDependencies') === true) {\r\n    satisfyDependencies('build-rscript');\r\n  }\r\n}\r\n","import { platform } from 'os';\n\nexport function which() {\n  return (platform() === 'win32') ? 'where' : 'which';\n}\n"],"names":["getConfig","key","atom","config","get","meta","satisfyDependencies","customArguments","title","description","type","default","order","manageDependencies","alwaysEligible","EventEmitter","[object Object]","cwd","super","this","observe","emit","spawnSync","platform","stdout","toString","name","exec","args","sh","atomCommandName","trim","split"],"mappings":"gMA0BO,SAASA,EAAUC,GACxB,OAAOC,KAAKC,OAAOC,IAAI,GAAGC,KAAaJ,sBCiClC,YACmC,IAApCD,EAAU,uBACZM,sBAAoB,iCD5DI,CAC1BC,gBAAiB,CACfC,MAAO,mBACPC,YAAa,0IACbC,KAAM,SACNC,QAAW,gBACXC,MAAO,GAETC,mBAAoB,CAClBL,MAAO,sBACPC,YAAa,yEACbC,KAAM,UACNC,SAAS,EACTC,MAAO,GAETE,eAAgB,CACdN,MAAO,kBACPC,YAAa,+EACbC,KAAM,UACNC,SAAS,EACTC,MAAO,2BCdJ,WACL,OAAO,cAA8BG,eACnCC,YAAYC,GACVC,QACAC,KAAKF,IAAMA,EACXf,KAAKC,OAAOiB,QAAQ,iCAAiC,IAAMD,KAAKE,KAAK,aAGvEL,cACE,MAAO,UAGTA,aACE,IAAoC,IAAhChB,EAAU,kBACZ,OAAO,EAIT,QADqBsB,YCtBF,UAAfC,aAA0B,QAAU,QDsBA,CAAC,aACtBC,QAAQC,WAO7BT,WAIE,MAAO,CACL,CACEU,KAAM,UACNC,KAAM,UACNC,KAAM,CAAE,iBACRX,IAAK,qBACLY,IAAI,EACJC,gBAAiB,eAEnB,CACEJ,KAAM,iBACNC,KAAM,UACNC,KAdoB5B,EAAU,mBAAmB+B,OAAOC,MAAM,KAe9Df,IAAK,qBACLY,IAAI,EACJC,gBAAiB"}